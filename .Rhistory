suh dude
750/3600
par(mar=c(1,1,1,1))
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
quiz.data = matrix(c(440, 210, 120, 180), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
mosaicplot(quiz.data, shade = TRUE)
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
legend("bottomleft", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("bottomleft", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
setwd("~/DSA/RDA/Shiny/Project")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(data.table)
library(tidycensus)
library(readxl)
library(tigris)
library(ggmap)
library(ggplot2)
setwd("~/DSA/RDA/Shiny/Project")
census_api_key("ab278550a1784132f981997c48014f5614b9404b")
census <- get_acs(geography = "county", variables = c("B01002_001", "B06011_001"), year = 2014)
census$GEOID = as.integer(census$GEOID)
cancercounties <- fread("./cancercounties.csv")
cancercounties$GEOID = as.integer(cancercounties$GEOID)
colnames(cancercounties)[2] = "GEOID"
colnames(cancercounties)[4] = "Cases"
cancercounties$Cases = as.numeric(gsub("#", "", cancercounties$Cases))
cc = cancercounties[, c("GEOID", "Cases")]
aqi <- fread("./annual_aqi_by_county_2015.csv")
aqi = aqi %>%
mutate(NAME = paste(County, State, sep=" County, ")) %>%
select(NAME, AQI = 'Median AQI')
ob <- read_excel("./OB_PREV_ALL_STATES.xlsx")
ob = ob %>%
select(GEOID = 'FIPS Codes', Obesity = `age-adjusted percent__9`) %>%
mutate_all(as.numeric)
vars = census %>%
spread(variable, estimate) %>%
select(-moe) %>%
group_by(GEOID) %>%
summarise_all(funs(first(na.omit(.)))) %>%
rename(age = B01002_001, income = B06011_001)
centers <- as.data.table(read_excel('./statecenters.xlsx'))
vars = left_join(vars, aqi, by = 'NAME')
vars = left_join(vars, cc, by = 'GEOID')
vars = left_join(vars, ob, by = 'GEOID')
vars = vars %>%
separate(NAME, c('County', 'State'), sep=', ' )
vars = left_join(vars,centers, by = 'State')
vars = vars %>%
separate(Coordinates, c('lat', 'lng'), sep='Â°N ') %>%
mutate(lat = as.numeric(lat), lng = -as.numeric(substr(lng, 1, nchar(lng)-2)))
counties <- counties(cb = TRUE, resolution = "20m")
counties$GEOID = as.integer(counties$GEOID)
fullmap = geo_join(counties, vars, by = "GEOID")
choice <- colnames(vars)[(4:8)]
states <- unique(vars$State)
popupFull <- paste0(fullmap$County,"<br>","State: ", fullmap$State,"<br>",
"Cancer Incidence Rate (per 100,000): ", fullmap$Cases)
temp <- fread('[01] Temp.txt', drop = "V1",
col.names = c("Body.Temp", "Gender", "Heart.Rate"))
temp %>%
summarise(mean(Body.Temp), mean(Heart.Rate))
temp %>%
group_by(Gender) %>%
summarise(mean(Body.Temp), mean(Heart.Rate))
ggplot(temp, aes(x = Gender, y = Heart.Rate)) +
geom_boxplot() + ggtitle("Distribution of Heart Rates by Gender")
ggplot(temp, aes(x = Gender, y = Body.Temp)) +
geom_boxplot() + ggtitle("Distribution of Body Temperatures (F) by Gender")
t.test(temp$Body.Temp, mu = 98.6, alternative = 'less')
t.test(temp$Body.Temp)
t.test(temp$Body.Temp[temp$Gender == "Female"], temp$Body.Temp[temp$Gender == "Male"],
alternative = 'two.sided')
library(datasets)
data("PlantGrowth")
ggplot(PlantGrowth, aes(x = group, y = weight)) +
geom_boxplot(aes(color = group)) +
ggtitle("Distribution of Plant Weights by Growth Treatment")
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
data("HairEyeColor")
hec <- HairEyeColor
mosaicplot(hec, shade=T)
brbl <- hec[,c("Brown", "Blue"), "Female"]
mosaicplot(brbl, shade=T)
chisq.test(brbl)
chisq.test(brbl)$residuals
chisq.test(brbl)$residuals
runApp()
3+2
runApp()
runApp()
runApp()
runApp()
smap
runApp()
smap <- geo_join(counties, filter(vars, State == 'New York'),
by="GEOID", how='inner')
smap
smap$lng
fortify(smap)$lng
fortify(smap)$long
fortify(smap)$long
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
smap <- geo_join(counties, filter(vars, State == 'Kentucky'),
by="GEOID", how='inner')
smap
as.data.frame(smap)
smap
cols <- subset(smap, select = "Cases")[[1]]
col
cols
runApp()
cols <- subset(smap, select = "Cases")[[1]]
col
cols <- subset(filter(vars, State == 'Kentucky'), select = "Cases")
cols
cols <- subset(filter(vars, State == 'Kentucky'), select = "Cases")[1]
cols
cols <- subset(filter(vars, State == 'Kentucky'), select = "Cases")[[1]]
cols
runApp()
runApp()
setwd("~/DSA/RDA/Shiny/Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
col1 <- subset(fullmap, select = Cases)[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cor.test(vars$Cases, vars$Obesity)
cor.test(vars$Cases, vars$Obesity)$cor
cor.test(vars$Cases, vars$Obesity)$sampleestimates
cor.test(vars$Cases, vars$Obesity)$statistic
cor.test(vars$Cases, vars$Obesity)$estimate
cor.test(vars$Cases, vars$Obesity)$estimate[1]
cor.test(vars$Cases, vars$Obesity)$estimate[[1]]
?map2
as.list(vars)
as.list(vars)$Cases
names(as.list(vars))
as.list(vars)[1]
map2_df(as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(vars$Cases, as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(rep(vars$Cases), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(c(rep(vars$Cases, 5)), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(list(rep(vars$Cases, 5)), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(list(rep(vars$Cases, 5)), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(list(rep(vars$Cases, 5), length.out=5), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(list(rep(vars$Cases, 5, length.out=5)), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(list(rep(vars$Cases, 5, length.out=5)), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
as.list(vars)[4:8]
sapply(list(rep(vars$Cases, 5, length.out=5)), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
?sapply
map2_df(c(vars$Cases,vars$Cases,vars$Cases,vars$Cases,vars$Cases), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map2_df(as.list(vars$Cases,vars$Cases,vars$Cases,vars$Cases,vars$Cases), as.list(vars[4:8]),function (x, y) {cor.test(x, y)$estimate[[1]]})
map+df(as.list(vars[4:8]),function (x) {cor.test(vars$Cases, y)$estimate[[1]]})
map_df(as.list(vars[4:8]),function (x) {cor.test(vars$Cases, y)$estimate[[1]]})
map_df(as.list(vars[4:8]),function (x) {cor.test(vars$Cases, x)$estimate[[1]]})
colnames(var)
colnames(vars)
vars
vars = vars[,c[1,2,3,7,4,6,5,8]]
vars = vars[,c(1,2,3,7,4,6,5,8)]
vars
map_df(as.list(vars[5:8]),function (x) {cor.test(vars$Cases, x)$estimate[[1]]})
cors = map_df(as.list(vars[5:8]),function (x) {cor.test(vars$Cases, x)$estimate[[1]]})
vars.sd
class(vars)
vars[,.SD]
vars[,print(.SD)]
summary(vars)
summary(vars[4:8])
class(summary(vars[4:8]))
as.data.frame(summary(vars[4:8]))
as.data.frame(summary(vars[4:8])) %>%
group_by(Var1)
as.data.frame(summary(vars[4:8])) %>%
group_by(Var2)
as.data.frame(summary(vars[4:8])) %>%
group_by(Var2)[1]
library(DT)
runApp()
runApp()
cors = map_df(as.list(vars[5:8]),function (x) {cor.test(vars$Cases, x)$estimate[[1]]})
cors
as.data.frame.matrix(summary(vars[4:8]))
as.data.frame(summary(vars[4:8]))
(summary(vars[4:8]))
library(stargazer)
install.packages('stargazer')
library(stargazer)
dashboardPage(
dashboardHeader(
title = "Cancer"
),
dashboardSidebar(
sidebarMenu(
menuItem("Map (Entire U.S.)", tabName = "mapall", icon = icon("map-o")),
selectInput("selected",
"Select Item to Display",
choice),
sidebarMenu(
menuItem("Map (by State)", tabName = "mapstates", icon = icon("map")),
selectizeInput("statels",
"Select State to Display",
states))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "mapall",
h2("Map of Entire U.S."),
fluidRow(leafletOutput("map"))
),
tabItem(tabName = "mapstates",
h2("Map by State"),
sidebarLayout(
mainPanel(leafletOutput("mapstate")),
sidebarPanel(stargazer(cors))
)
)
)
)
)
stargazer(cors, type="html")
runApp()
runApp()
runApp()
tb = (summary(vars[4:8]))
tb
tb[1]
tb$Cases
tb[,,Cases]
tb = (summary(vars[4:8]))
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
View(vars)
runApp()
runApp()
vars[age]
vars[Cases]
vars['Cases']
runApp()
runApp()
vars['age']
vars['age'][1]
runApp()
runApp()
runApp()
runApp()
